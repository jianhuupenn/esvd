% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matrix_factorization.R
\name{.binary_search}
\alias{.binary_search}
\title{Binary search for the appropriate step size}
\usage{
.binary_search(
  dat_vec,
  current_vec,
  step_vec,
  other_mat,
  n,
  p,
  max_iter = 100,
  ...
)
}
\arguments{
\item{dat_vec}{a vector}

\item{current_vec}{a vector}

\item{step_vec}{a vector of the same length of \code{current_vec} (typically
the vector output by \code{eSVD:::.frank_wolfe})}

\item{other_mat}{a matrix with the number of rows equal to \code{length(dat_vec)} and the
number of columns equal to \code{length(current_vec)}}

\item{n}{the number of rows of \code{dat} when called on in \code{eSVD:::.optimize_mat}}

\item{p}{the number of columns of \code{dat} when called on in \code{eSVD:::.optimize_mat}}

\item{max_iter}{maximum number of iterations for the algorithm}

\item{...}{extra arguments, such as nuisance parameters for \code{"neg_binom"}
or \code{"curved gaussian"} for \code{family}}
}
\value{
a scalar
}
\description{
This is a variant of the line search variant of Frank-Wolfe, where we choose
the step size that minimizes the decrease in the objective function.
In this variant, we assume that the minimizing step size lies between 0 and 1,
and we search for the optimal step size via binary search. We first run
5 iterations of binary search. Then, in the next stage,
we keep running binary search if (within our search space strategy), we
can still find a new possible value that decreases the objective function.
}
